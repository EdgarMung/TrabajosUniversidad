from Clases import AFN,AFD,Verificador
from AlgoritmoLexObjeto import Lexico
import tkinter as tk

class Crear_Ventana(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.geometry("520x150")
        self.master.title("Verificador Gramaticas")
        self.master.config(background = "dodger blue")
        self.Objeto = None
        self.Inicializacion()

    def widges(self):
        tk.Label(self.master, text="CADENA: ",font = ("Arial Black",12),background = "dodger blue",fg = "black").grid(column = 0,row = 0,padx = 5, pady = 5)
        Entrada = tk.Entry(self.master,width = 40,background = "white",fg = "black",justify = tk.CENTER)
        Entrada.grid(column = 1,row = 0,columnspan = 2,padx = 5, pady = 5)
        tk.Label(self.master, text="RESULTADO :",font = ("Arial Black",12),background = "dodger blue",fg = "black").grid(column = 1,row = 1,padx = 5, pady = 5)
        Salida = tk.Entry(self.master,width = 10,background = "white",fg = "black",state="readonly",justify = tk.CENTER)
        Salida.grid(column = 2,row = 1,padx = 5, pady = 5)
        tk.Button(self.master, text="Calcular", height = 1, width = 5, activebackground = "blue", activeforeground = "White",command = lambda: self.Calcular(Entrada.get(),Salida)).grid(column = 3, row = 0,padx = 5, pady = 5)
        tk.Button(self.master, text="Cerrar" , command = self.master.destroy).grid(column = 1, row = 2,padx = 5, pady = 5)
        
    def Inicializacion(self):
        sim = AFN(simbolo = 'A')
        sim.union(AFN(simbolo = 'B'))
        sim.union(AFN(simbolo = 'C'))
        sim.union(AFN(simbolo = 'D'))
        sim.union(AFN(simbolo = 'E'))
        sim.union(AFN(simbolo = 'F'))
        sim.union(AFN(simbolo = 'G'))
        sim.union(AFN(simbolo = 'H'))
        sim.union(AFN(simbolo = 'I'))
        sim.union(AFN(simbolo = 'J'))
        sim.union(AFN(simbolo = 'K'))
        sim.union(AFN(simbolo = 'L'))
        sim.union(AFN(simbolo = 'M'))
        sim.union(AFN(simbolo = 'N'))
        sim.union(AFN(simbolo = 'O'))
        sim.union(AFN(simbolo = 'P'))
        sim.union(AFN(simbolo = 'Q'))
        sim.union(AFN(simbolo = 'R'))
        sim.union(AFN(simbolo = 'S'))
        sim.union(AFN(simbolo = 'T'))
        sim.union(AFN(simbolo = 'U'))
        sim.union(AFN(simbolo = 'V'))
        sim.union(AFN(simbolo = 'W'))
        sim.union(AFN(simbolo = 'X'))
        sim.union(AFN(simbolo = 'Y'))
        sim.union(AFN(simbolo = 'Z'))
        sim.union(AFN(simbolo = 'a'))
        sim.union(AFN(simbolo = 'b'))
        sim.union(AFN(simbolo = 'c'))
        sim.union(AFN(simbolo = 'd'))
        sim.union(AFN(simbolo = 'e'))
        sim.union(AFN(simbolo = 'f'))
        sim.union(AFN(simbolo = 'g'))
        sim.union(AFN(simbolo = 'h'))
        sim.union(AFN(simbolo = 'i'))
        sim.union(AFN(simbolo = 'j'))
        sim.union(AFN(simbolo = 'K'))
        sim.union(AFN(simbolo = 'l'))
        sim.union(AFN(simbolo = 'm'))
        sim.union(AFN(simbolo = 'n'))
        sim.union(AFN(simbolo = 'o'))
        sim.union(AFN(simbolo = 'p'))
        sim.union(AFN(simbolo = 'q'))
        sim.union(AFN(simbolo = 'r'))
        sim.union(AFN(simbolo = 's'))
        sim.union(AFN(simbolo = 't'))
        sim.union(AFN(simbolo = 'u'))
        sim.union(AFN(simbolo = 'v'))
        sim.union(AFN(simbolo = 'w'))
        sim.union(AFN(simbolo = 'x'))
        sim.union(AFN(simbolo = 'y'))
        sim.union(AFN(simbolo = 'z'))
        sim.union(AFN(simbolo = '/'))
        sim.union(AFN(simbolo = '*'))
        sim.union(AFN(simbolo = '-'))
        sim.union(AFN(simbolo = '+'))
        sim.union(AFN(simbolo = '^'))
        sim.union(AFN(simbolo = '('))
        sim.union(AFN(simbolo = ')'))
        sim.union(AFN(simbolo = '!'))
        sim.union(AFN(simbolo = '¡'))
        sim.union(AFN(simbolo = '"'))
        sim.union(AFN(simbolo = '#'))
        sim.union(AFN(simbolo = '%'))
        sim.union(AFN(simbolo = '?'))
        sim.union(AFN(simbolo = '¿'))

        flecha = AFN(simbolo='-')
        flecha.concatenacion(AFN(simbolo='>'))

        PC = AFN(simbolo=';')

        Compuerta = AFN(simbolo='|')

        sim.union_especial([flecha,PC,Compuerta])

        AFDD = sim.ir_a()
        self.Objeto = Verificador(AFDD)

    def Calcular(self,cadena,Salida):
        resultado = self.Objeto.Verificar(cadena)
        Salida.config(state = tk.NORMAL)
        Salida.delete(0)
        Salida.insert(tk.END,resultado)
        Salida.config(state="readonly")